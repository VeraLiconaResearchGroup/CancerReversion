l <- apply(d, 2, unique)
l2 <- sapply(l, length)
l3 <- d[1,]
l3[which(l2 == 2)] <- 's'
for(thing in l3){
print(thing)
}
d <- data.frame(c(1,1,0,1,1,1,0,0,1,1,1,1,1,1,0,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,0,0),
c(1,1,0,1,1,1,0,0,1,1,1,1,1,1,0,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,0,0,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0),
c(1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,0,0,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0),
c(1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,0,0))
d <- d %>%t
l <- apply(d, 2, unique)
l2 <- sapply(l, length)
l3 <- d[1,]
l3[which(l2 == 2)] <- 's'
for(thing in l3){
print(thing)
}
d <- data.frame(c(1,1,0,1,1,1,0,0,1,1,1,1,1,1,0,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,0,0),
c(1,1,0,1,1,1,0,0,1,1,1,1,1,1,0,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,0,0,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0),
c(1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,0,0,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0),
c(1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,0,0))
d <- d %>%t
l <- apply(d, 2, unique)
l2 <- sapply(l, length)
l3 <- d[1,]
l3[which(l2 == 2)] <- 's'
for(thing in l3){
print(thing)
}
d <- data.frame(c(1,1,0,1,1,1,0,0,1,1,1,1,1,1,0,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,0,0),
c(1,1,0,1,1,1,0,0,1,1,1,1,1,1,0,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,0,0,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0),
c(1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,0,0,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0),
c(1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,0,0))
d <- d %>%t
l <- apply(d, 2, unique)
l2 <- sapply(l, length)
l3 <- d[1,]
l3[which(l2 == 2)] <- 's'
for(thing in l3){
print(thing)
}
#TBET=ON, CERAMIDE=ON, ERK=ON
#result should be apoptosis ON
p7<-fixGenes(network,c("tbet","ceramide","erk"),c(1,1,1))
state7<-generateState(network,c("stimuli"=1,"il15"=1,"tbet"=1,"ceramide"=1,"erk"=1))
attr7<-getAttractors(p7,type="synchronous",startStates = list(state7))
getBasinOfAttraction((attr7))
#TBET=ON, CERAMIDE=ON, ERK=ON
#result should be apoptosis ON
p7<-fixGenes(network,c("tbet","ceramide","erk"),c(1,1,1))
state7<-generateState(network,c("stimuli"=1,"il15"=1,"tbet"=1,"ceramide"=1,"erk"=1))
attr7<-getAttractors(p7,type="synchronous",startStates = list(state7))
getBasinOfAttraction((attr7, 1))
#TBET=ON, CERAMIDE=ON, ERK=ON
#result should be apoptosis ON
p7<-fixGenes(network,c("tbet","ceramide","erk"),c(1,1,1))
state7<-generateState(network,c("stimuli"=1,"il15"=1,"tbet"=1,"ceramide"=1,"erk"=1))
attr7<-getAttractors(p7,type="synchronous",startStates = list(state7))
getBasinOfAttraction(attr7, 1)
#CERAMIDE=OFF, SPHK1=ON
#result should be apoptosis OFF
p1<-fixGenes(network,c("ceramide","sphk1"),c(0,1))
state1<-generateState(network,c("stimuli"=1,"il15"=1,"ceramide"=0,"sphk1"=1))
attr1<-getAttractors(p1,type="synchronous",startStates = list(state1))
getBasinOfAttraction(attr1, 1)
knitr::opts_chunk$set(echo = TRUE)
states <- read.table("inital_states.txt", row.names = 1, header = FALSE)
?read.table
setwd("/Volumes/GoogleDrive/My Drive/ALS_IPS/zanudo2015")
states <- read.table("inital_states.txt", row.names = 1, header = FALSE)
states <- read.table("initial_states.txt", row.names = 1, header = FALSE)
states[,c("il15", "stimuli")] <- 1
states[,c("stimuli2", "cd45", "tax", "pdgf")] <- 0
dim(states)
states[1:5,1:5]
states <- read.table("initial_states.txt", row.names = 1, header = TRUE)
states <- read.table("initial_states.txt", row.names = 1, header = TRUE)
states[,c("il15", "stimuli")] <- 1
states[,c("stimuli2", "cd45", "tax", "pdgf")] <- 0
states[1:5,1:5]
states[1:5,54:60]
attr0<-getAttractors(network,type="synchronous",method="chosen", startStates=states,returnTable = TRUE)
dim(statwes)
dim(states)
attr0<-getAttractors(network,type="synchronous",method="chosen", startStates=list(states),returnTable = TRUE)
states <- states %>% t() %>% as.data.frame()
attr0<-getAttractors(network,type="synchronous",method="chosen", startStates=states,returnTable = TRUE)
sink(file="100000_init.txt",type="output")
attr0
sink(file=NULL)
?getAttractors
states <- read.table("initial_states.txt", row.names = 1, header = TRUE)
attr0<-getAttractors(network, genesON = c("il15", "stimuli"), genesOFF = c("stimuli2", "cd45", "tax", "pdgf"),type="synchronous",method="chosen", startStates=states,returnTable = TRUE)
states <- states %>% t() %>% as.data.frame()
attr0<-getAttractors(network, genesON = c("il15", "stimuli"), genesOFF = c("stimuli2", "cd45", "tax", "pdgf"),type="synchronous",method="chosen", startStates=states,returnTable = TRUE)
sink(file="100000_init_fixedsource.txt",type="output")
attr0
sink(file=NULL)
states <- read.table("initial_states.txt", row.names = 1, header = TRUE)
states[,c("il15", "stimuli")] <- 1
states[,c("stimuli2", "cd45", "tax", "pdgf")] <- 0
states <- states %>% t() %>% as.data.frame()
attr0<-getAttractors(network, genesON = c("il15", "stimuli"), genesOFF = c("stimuli2", "cd45", "tax", "pdgf"),type="synchronous",method="chosen", startStates=states,returnTable = TRUE)
sink(file="100000_init_fixedsource_test.txt",type="output")
attr0
sink(file=NULL)
attr0<-getAttractors(network, genesON = c("il15", "stimuli"), genesOFF = c("stimuli2", "cd45", "tax", "pdgf"),type="synchronous",method="sat.exhaustive")
sink(file="sat.exhaustive.txt",type="output")
attr0
sink(file=NULL)
attr0<-getAttractors(network, genesON = c("il15", "stimuli"), type="synchronous",method="sat.exhaustive")
sink(file="sat.exhaustive_on.txt",type="output")
attr0
attr0
sink(file=NULL)
attr0<-getAttractors(network, genesON = c("il15", "stimuli"), type="synchronous",method="chosen", startStates=states,returnTable = TRUE)
sink(file="100000_init_fixedsource_ON.txt",type="output")
attr0
sink(file=NULL)
states <- read.table("initial_states.txt", row.names = 1, header = TRUE)
states <- states %>% t() %>% as.data.frame()
states[c("il15", "stimuli"),] <- 1
attr0<-getAttractors(network, genesON = c("il15", "stimuli"), type="synchronous",method="chosen", startStates=states,returnTable = TRUE)
sink(file="100000_init_fixedsource_ON.txt",type="output")
attr0
sink(file=NULL)
states <- read.table("initial_states.txt", row.names = 1, header = TRUE) %>%t() %>%as.data.frame() # Dataframe without fixed values
states2 <- states # Dataframe with fixed values
states2[c("il15", "stimuli"),] <- 1
states2[c("stimuli2", "cd45", "tax", "pdgf"),] <- 0
states3 <- states[c("il15", "stimuli"),] <- 1
states3 <- states[c("il15", "stimuli"),] <- 1
attr0<-getAttractors(network, type="synchronous",method="chosen", startStates=states3,returnTable = TRUE)
states3 <- states[c("il15", "stimuli"),] <- 1
attr0<-getAttractors(network, type="synchronous",method="chosen", startStates=states3,returnTable = TRUE)
sim(states3)
dim(states3)
dim(states)
states3 <- states[c("il15", "stimuli"),] <- 1
attr0<-getAttractors(network, type="synchronous",method="chosen", startStates=states3,returnTable = TRUE)
dim(states3)
states <- read.table("initial_states.txt", row.names = 1, header = TRUE) %>%t() %>%as.data.frame() # Dataframe without fixed values
states3 <- states
states3[c("il15", "stimuli"),] <- 1
attr0<-getAttractors(network, type="synchronous",method="chosen", startStates=states3, returnTable = TRUE)
sink(file="100000_init_fixedsource_ON.txt",type="output")
attr0
sink(file=NULL)
sink(file=NULL)
states3["il15"]
states3
states3[1:5,1:5]
row.names(states3)
nrow(states3)
states3["il15",]
sum(states3["il15",])
attr0<-getAttractors(network, genesON = c("il15", "stimuli"), genesOFF = c("stimuli2", "cd4", "tax", "pdgf"), type="synchronous",method="sat.exhaustive")
attr0<-getAttractors(network, genesON = c("il15", "stimuli"), genesOFF = c("stimuli2", "cd45", "tax", "pdgf"), type="synchronous",method="sat.exhaustive")
sink(file="sat_exhaustive.txt",type="output")
attr0
sink(file=NULL)
attr0<-getAttractors(network, genesON = c("il15", "stimuli"), type="synchronous",method="sat.exhaustive")
sink(file="sat.exhaustive_on.txt",type="output")
attr0
sink(file=NULL)
states3 <- states
states3[c("il15", "stimuli"),] <- 1
attr0<-getAttractors(network, type="synchronous", method="chosen", startStates=states3, returnTable = TRUE)
sink(file="100000_init_fixedsource_ON.txt",type="output")
attr0
sink(file=NULL)
DAC <- read.table('sfa_3.txt', header = TRUE, row.names = 1)
setwd("/Volumes/GoogleDrive/My Drive/ALS_IPS/zanudo2015/p-value exploration")
# Read in file with 20,000 raw logss sfa results
logss  <- read.table('sfa_3.txt', header = TRUE, row.names = 1)
# Read in L1.1 SFA attractor as comparison for computing DAC
comp <- read.table('../sfa_leukemia1.txt', row.names = 1, header = TRUE, nrow = 1)
View(comp)
heda(logss)
head(logss)
DAC <- apply(logss, 1, myfun)
myfun <- function(row){
return(row - comp)
}
DAC <- apply(logss, 1, myfun)
logss2 <- logss[1:5,]
DAC <- apply(logss2, 1, myfun)
View(DAC)
DAC <- apply(logss2, 1, myfun) %>% as.data.frame()
View(comp)
View(DAC)
library(tidyverse)
DAC <- apply(logss2, 1, myfun) %>% as.data.frame()
View(DAC)
DAC <- logss2 - comp
?sweep
DAC <- sweep(logss2,2,x)
DAC <- sweep(logss2,2,comp)
DAC <- sweep(logss2,1,comp)
comp
len(comp)
lenght(comp)
length(comp)
logss2
ncol(logss2)
DAC <- sweep(logss2,1,comp)
DAC <- sweep(logss2,2,comp)
logss2 <- logss[1:5,] %>% as.data.frame()
DAC <- sweep(logss2,2,comp)
DAC <- apply(logss, 1, function(x) x- comp)
DAC <- apply(logss2, 1, function(x) x- comp)
View(DAC)
DAC <- apply(logss2, 1, function(x) x- comp) %>% as.data.frame()
View(comp)
View(DAC)
View(logss)
View(logss2)
DAC <- lapply(logss2, function(x) x- comp)
View(DAC)
typeof(DAC)
DAC[] <- lapply(logss2, function(x) x- comp)
View(DAC)
typeof(DAC)
DAC[] <- lapply(logss2, function(x) x- comp)
View(DAC)
DAC[] <- lapply(logss2%>% t(), function(x) x- comp)
logss2[] <- logss[1:5,] %>% t()
View(logss2)
logss2[] <- logss[1:5,] %>% t()
View(logss2)
logss2 <- logss[1:5,] %>% t()
logss2 <- logss[1:5,] %>% t() %>% as.data.frame()
View(logss2)
DAC[] <- lapply(logss2%>% t(), function(x) x- comp)
DAC[] <- lapply(logss2, function(x) x- comp)
View(DAC)
data.frame(DAC)
d <_- data.frame(DAC)
d <- data.frame(DAC)
typeof(d)
View(d)
logss2 <- logss[1:5,] %>% t() %>% as.data.frame()
logss2
DAC[] <- lapply(logss2, function(x) x- comp)
DAC
View(DAC)
logss2 <- logss[1:5,]
DAC[] <- apply(logss2, 2, function(x) x- comp)
DAC[] <- apply(logss2, 1, function(x) x- comp)
apply(logss2, 1, function(x) print(length(x)))
apply(logss2, 2, function(x) print(length(x)))
D <- apply(logss2, 2, function(x) print(length(x)))
typeof(D0)
typeof(D)
D[] <- apply(logss2, 2, function(x) print(length(x)))
typeof(D)
D[] <- lapply(logss2,  function(x) print(length(x)))
D[] <- lapply(logss2,  function(x) print(length(x)))
logss2 <- logss[1:5,] %>% t() %>% as.data.frame()
D[] <- lapply(logss2, function(x) print(length(x)))
typeof(D)
D[] <- lapply(logss2, function(x) print(length(x))) %>% as.data.frame()
typeof(D)
View(D)
D <- lapply(logss2, function(x) print(length(x))) %>% as.data.frame()
View(D)
D <- apply(logss2,2, function(x) print(length(x))) %>% as.data.frame()
logss2 <- logss[1:5,]
D <- apply(logss2, 1, function(x) x-comp) %>% as.data.frame()
apply(logss2, 1, function(x) x-comp)
D <- apply(logss2, 1, function(x) x-comp) %>% as.data.frame()
View(D)
D <- apply(logss2, 1, function(x) x-comp) %>% data.frame()
View(D)
logss2 <- logss[1:5,]
logss2 <- logss[1:5,] %>% t() %>% as.data.frame()
D <- lapply(logss2, function(x) x-comp) %>% t() %>% data.frame()
lapply(logss2, function(x) print(x-comp))
D <- lapply(logss2, function(x) x-comp) %>% t() %>% data.frame()
D <- lapply(logss2, function(x) x-comp) %>% t()
View(D)
lapply(logss2, function(x) x-comp)
D <- lapply(logss2, function(x) x-comp) %>% data.frame()
View(D)
myfun <- function(row){
return(row - comp)
}
D <- apply(logss2, 1, myfun) %>% data.frame()
View(D)
# Read in L1.1 SFA attractor as comparison for computing DAC
comp <- read.table('../sfa_leukemia1.txt', row.names = 1, header = TRUE, nrow = 1)
typeof(comp)
comp
# Read in L1.1 SFA attractor as comparison for computing DAC
comp <- read.table('../sfa_leukemia1.txt', row.names = 1, header = TRUE, nrow = 1) %>% as.numeric
comp
typeof(comp)
D <- apply(logss2, 1, function(x) x -comp)
View(D)
typeof(D)
logss2
logss2 <- logss[1:5,]
D <- apply(logss2, 1, function(x) x -comp)
D[] <- apply(logss2, 1, function(x) x -comp)
typeof(D)
View(D)
logss2 <- logss[1:5,] %>% t()
D <- lapply(logss2, function(x) x -comp)
logss2 <- logss[1:5,] %>% t() %>% as.data.frame)()
logss2 <- logss[1:5,] %>% t() %>% as.data.frame()
D <- lapply(logss2, function(x) x -comp)
D <- apply(logss2, function(x) x - comp)
D <- apply(logss2, 1, function(x) x - comp)
D <- apply(logss2, 1, function(x) x - comp) %>% as.data.fram(e()
D <- apply(logss2, 1, function(x) x - comp) %>% as.data.frame()
D <- apply(logss2, 1, function(x) x - comp) %>% as.data.frame()
logss2 <- logss[1:5,]
D <- apply(logss2, 1, function(x) x - comp) %>% as.data.frame()
D <- apply(logss2, 1, function(x) x - comp) %>% t() %>% as.data.frame()
DAC <- apply(logss2, 1, '-', comp) %>% t() %>% as.data.frame()
View(DAC)
hist(DAC$a20)
DAC <- apply(logss, 1, '-', comp) %>% t() %>% as.data.frame()
View(DAC)
dim(DAC)
hist(DAC$a20)
source('/Volumes/GoogleDrive/My Drive/ALS_IPS/zanudo2015/p-value exploration/DAC_Pval.R', echo=TRUE)
for(col in names(DAC)){
hist(DAC[,col])
}
dev.off()
pdf('histograms_abs.pdf')
for(col in names(DAC)){
hist(abs(DAC[,col]))
}
dev.off()
pdf('histograms_tr.pdf')
for(col in names(DAC)){
tr <- abs(DAC[,col] - mean(DAC[,col]))
hist(tr)
}
dev.off()
col = 'a20'
tr <- abs(DAC[,col] - mean(DAC[,col]))
test <- shapiro.test(tr)
test <- shapiro.test(tr[1:500])
test
# pdf('histograms_tr.pdf')
for(col in names(DAC)){
tr <- abs(DAC[,col] - mean(DAC[,col]))
test <- shapiro.test(tr[1:500])
if(test$p.value > 0.05){
print('PASS')
}
# hist(tr)
}
tr <- abs(DAC[,col] - mean(DAC[,col]))
# pdf('histograms_tr.pdf')
for(col in names(DAC)){
tr <- abs(DAC[,col] - mean(DAC[,col]))
test <- shapiro.test(tr[1:5000])
if(test$p.value > 0.05){
print('PASS')
}
# hist(tr)
}
# pdf('histograms_tr.pdf')
for(col in names(DAC)){
tr <- abs(DAC[,col] - mean(DAC[,col]))
test <- shapiro.test(tr[sample(1:20000, 5000)])
if(test$p.value > 0.05){
print('PASS')
}
# hist(tr)
}
# pdf('histograms_tr.pdf')
for(col in names(DAC)){
tr <- abs(DAC[,col] - mean(DAC[,col]))
test <- shapiro.test(tr[sample(1:20000, 5000)])
if(test$p.value > 0.05){
print('PASS')
}
# hist(tr)
}
# pdf('histograms_tr.pdf')
for(col in names(DAC)){
tr <- abs(DAC[,col] - mean(DAC[,col]))
test <- shapiro.test(tr[sample(1:20000, 5000)])
if(test$p.value > 0.05){
print('PASS')
}
# hist(tr)
}
# pdf('histograms_tr.pdf')
for(col in names(DAC)){
tr <- abs(DAC[,col] - mean(DAC[,col]))
test <- shapiro.test(tr[sample(1:20000, 5000)])
if(test$p.value > 0.05){
print('PASS')
}
# hist(tr)
}
DAC$tradd
summary(DAC$tradd)
name <- rep('other', 877)
name[leuk] <- "leukemia"
leuk <- c(1, 8, 12, 13, 25, 33, 36, 39, 40, 57, 62, 66, 137, 139, 160, 162, 169, 203, 225, 226, 284, 288, 332, 335, 494, 507, 532, 560, 566, 567, 584)
apop <- c(2,4,5,7,11,16,18,19,26,30,31,32,38,45,46,47,48,51,52,53,54,59,60,64,76,78,80,89,97,103,126,145,150,161,166,167,174,176,180,181,184,195,196,197,202,204,207,209,219,228,231,232,241,245,247,248,253,259,294,296,301,325,346,361,375,387,389,393,399,401,408,416,418,419,420,429,430,440,441,442,454,460,462,465,471,473,475,482,484,500,502,505,508,534,541,543,545,549,550,555,562)
name <- rep('other', 877)
name[leuk] <- "leukemia"
name[apop] <- 'apoptosis'
df <- as.data.frame(name)
View(df)
getwd()
setwd("/Volumes/GoogleDrive/My Drive/ALS_IPS/zanudo2015")
write.table(df, 'list.txt', quote = FALSE, row.names = FALSE)
err_prob <- 0.01
phredscore <- -10*log10(err_prob)
phredscore
err_prob <- 0.1
phredscore
phredscore <- -10*log10(err_prob)
phredscore
err_prob <- 0.05
phredscore <- -10*log10(err_prob)
phredscore
err_prob <- 0.001
phredscore <- -10*log10(err_prob)
phredscore
eprob <- 10^(-10*phredscore)
eprob
eprob <- 10^(phredscore/-10)
eprob
round(3.14159)
round(3.14159,)
round(3.14159,1)
round(3.14159,2)
round(3.14159,3)
round(3.14159,4)
?roudn
?round
bases <- c("A", "A", "M", "B", "A", "V", "H", "A", "N")
bases["M"] <- "A"
bases
bases <- c("A", "A", "M", "B", "A", "V", "H", "A", "N")
bases[bases == "M"] <- A
bases[bases == "M"] <- "A"
bases
bases[bases == "B"] <- "C"
bases[bases == "V"] <- "A"
bases[bases == "H"] <- "A"
bases[bases == "N"] <- "A"
bases
head(PlantGrowth)
plants <- unstack(PlantGrowth)
head(plants)
boxplot(plants)
?t.test
# R code goes here.
t.test(plants$ctrl, plants$trt1)
# R code goes here.
t.test(plants$ctrl, plants$trt1)
t.test(plants$trt1, plants$trt2)
head(cars)
?cor.test
# R code goes here.
cor.test(cars)
# R code goes here.
cor.test(cars$speed, cars$dist)
plot(cars$speed, cars$dist)
# R code goes here.
cor.test(cars$speed, cars$dist)
plot( cars$dist, cars$speed, main = "Speed vs Stopping Distance". xlab = "Stopping Distance", ylab= "Speed")
plot( cars$dist, cars$speed, main = "Speed vs Stopping Distance", xlab = "Stopping Distance", ylab= "Speed")
library(MASS) # load the MASS library to make the data set available
head(cabbages)
# R code goes here.
fit <- lm(cabbages$VitC ~ cabbages$HeadWt+cabbages$Cult)
summary(fit)
# R code goes here.
ggplot(data = cars, aes(x = dist, y = speed))
library(ggplot2) # load the ggplot2 library
# R code goes here.
ggplot(data = cars, aes(x = dist, y = speed)) + geom_point()
library(RColorBrewer)
# col_opt <-rainbow(k)
col_opt <- brewer.pal(k,"Set3")
k = 14
# col_opt <-rainbow(k)
col_opt <- brewer.pal(k,"Set3")
# col_opt <-rainbow(k)
col_opt <- brewer.pal(k,"Set4")
# col_opt <-rainbow(k)
col_opt <- brewer.pal(k,"Set2")
# col_opt <-rainbow(k)
col_opt <- brewer.pal(k,"Set1")
# col_opt <-rainbow(k)
col_opt <- brewer.pal(k)
?brewer.pal
?legend
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set wd to wherever script is located
network <- loadNetwork("sub_network.bn")
library(tidyverse)
library(BoolNet)
network <- loadNetwork("sub_network.bn")
network
names(network)
network$genes
network2 <- loadNetwork("sub_network2.bn")
network2$genes
