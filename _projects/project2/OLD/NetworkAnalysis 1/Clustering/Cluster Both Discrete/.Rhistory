df <- read.delim("~/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/Network Construction 2/MRs to TFs/Mutations_step9/MRs to TFs gene symbol.csv", header=FALSE)
View(df)
df <- df[,c(1,3,2)]
write.table(df, "MRs to TFs.sif", row.names = FALSE)
MRs.to.TFs.gene.symbol <- read.table("~/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/Network Construction 2/MRs to TFs/Context_step9 protein only/MRs to TFs gene symbol.csv", quote="\"", comment.char="")
View(MRs.to.TFs.gene.symbol)
df <- MRs.to.TFs.gene.symbol[,c(1,3,2)]
View(df)
write.table(df, "MRs to TFs.sif", quote = FALSE, row.names = FALSE)
write.table(df, "MRs to TFs.sif", quote = FALSE, row.names = FALSE, col.names = FALSE)
tinytex:::is_tinytex()
knitr::opts_chunk$set(echo = FALSE)
library(devtools)
library(ggplot2)
library(tidyverse)
library(class)
# Classifying all perturbations of FC1
# training set is still those that clustered together in discrete double
test_all_pert <- read.delim('../../insilico_perturbations/testSet_allPerturb.txt', header = FALSE, row.names = 1)
names(test_all_pert) <- names(test)
names(test_all_pert)
# creating test set
test <- read.delim("DiscreteBoth/pert2205_attr", header=FALSE, row.names=1) %>% t() %>% as.data.frame()
testAll <- read.delim("../../insilico_perturbations/testSet.txt", header=FALSE, row.names=1)
names(testAll) <- names(test)
names(test_all_pert) <- names(test)
names(test_all_pert)
test_all_pert
# Classifying all perturbations of FC1
# training set is still those that clustered together in discrete double
test_all_pert <- read.delim('../../insilico_perturbations/testSet_allPerturb.txt', header = FALSE, row.names = 1)
names(test_all_pert) <- names(test)
View(test_all_pert)
kn4 <- knn(train = Train[,-117], test = test_all_pert, cl = Train$class, k =10)
# Create training set
# Those attractors that always clustered with 231 for hierarchical and kmeans with 2 and 3 clusters for the discrete double vecotrs
cancerousTrain <- read.delim("DiscreteBoth/cancerousTrain.txt", row.names=1)
cancerousTrain$class <- rep("cancerous", nrow(cancerousTrain))
# Those attractors that always clustered with 10A for hierarchical and kmeans with 2 and 3 clusters for the discrete double vecotrs
normalTrain <- read.delim("DiscreteBoth/normalTrain.txt", row.names = 1)
normalTrain$class <- rep("normal", nrow(normalTrain))
Train <- rbind(cancerousTrain, normalTrain)
# creating test set
test <- read.delim("DiscreteBoth/pert2205_attr", header=FALSE, row.names=1) %>% t() %>% as.data.frame()
testAll <- read.delim("../../insilico_perturbations/testSet.txt", header=FALSE, row.names=1)
names(testAll) <- names(test)
# Classifying a perturbation we deemed successful based on readout nodes
kn2 <- knn(train = Train[,-117], test = test, cl = Train$class, k = 10)
res <- data.frame("attractor" = "perturbation 2205", "cluster"= as.character(kn2), stringsAsFactors = FALSE)
res
# Classifying all perturbations of FC1
# training set is still those that clustered together in discrete double
test_all_pert <- read.delim('../../insilico_perturbations/testSet_allPerturb.txt', header = FALSE, row.names = 1)
names(test_all_pert) <- names(test)
kn4 <- knn(train = Train[,-117], test = test_all_pert, cl = Train$class, k =10)
res <- data.frame("attractor" = row.names(test_all_pert), "cluster"= as.character(kn4), stringsAsFactors = FALSE)
res
ca <- res %>% filter(cluster = "cancerous")
ca <- res %>% filter(cluster == "cancerous")
norm <- res %>% filter(cluster == "normal")
kn4 <- knn(train = Train[,-117], test = test_all_pert, cl = Train$class, k =100)
res <- data.frame("attractor" = row.names(test_all_pert), "cluster"= as.character(kn4), stringsAsFactors = FALSE)
ca <- res %>% filter(cluster == "cancerous")
norm <- res %>% filter(cluster == "normal")
kn4 <- knn(train = Train[,-117], test = test_all_pert, cl = Train$class, k =10)
res <- data.frame("attractor" = row.names(test_all_pert), "cluster"= as.character(kn4), stringsAsFactors = FALSE)
ca <- res %>% filter(cluster == "cancerous")
norm <- res %>% filter(cluster == "normal")
knitr::opts_chunk$set(echo = FALSE)
library(devtools)
library(ggplot2)
library(tidyverse)
library(class)
# Adding an "other" classification to training set - all attractors that did not cluster with 231 or 10A
otherTrain <- read.delim('DiscreteBoth/Other_attrs.txt', header = TRUE, row.names = 1)
View(otherTrain)
# Create training set
# Those attractors that always clustered with 231 for hierarchical and kmeans with 2 and 3 clusters for the discrete double vecotrs
cancerousTrain <- read.delim("DiscreteBoth/cancerousTrain.txt", row.names=1)
cancerousTrain$class <- rep("cancerous", nrow(cancerousTrain))
# Those attractors that always clustered with 10A for hierarchical and kmeans with 2 and 3 clusters for the discrete double vecotrs
normalTrain <- read.delim("DiscreteBoth/normalTrain.txt", row.names = 1)
normalTrain$class <- rep("normal", nrow(normalTrain))
Train <- rbind(cancerousTrain, normalTrain)
View(Train)
otherTrain$class <- rep("other", nrow(otherTrain))
train2 <- rbind(otherTrain, Train)
kn5 <- knn(train = Train2[,-117], test = test_all_pert, cl = Train2$class, k =10)
Train2 <- rbind(otherTrain, Train)
kn5 <- knn(train = Train2[,-117], test = test_all_pert, cl = Train2$class, k =10)
# training set is still those that clustered together in discrete double
test_all_pert <- read.delim('../../insilico_perturbations/testSet_allPerturb.txt', header = FALSE, row.names = 1)
names(test_all_pert) <- names(test)
knitr::opts_chunk$set(echo = FALSE)
library(devtools)
library(ggplot2)
library(tidyverse)
library(class)
# Create training set
# Those attractors that always clustered with 231 for hierarchical and kmeans with 2 and 3 clusters for the discrete double vecotrs
cancerousTrain <- read.delim("DiscreteBoth/cancerousTrain.txt", row.names=1)
cancerousTrain$class <- rep("cancerous", nrow(cancerousTrain))
# Those attractors that always clustered with 10A for hierarchical and kmeans with 2 and 3 clusters for the discrete double vecotrs
normalTrain <- read.delim("DiscreteBoth/normalTrain.txt", row.names = 1)
normalTrain$class <- rep("normal", nrow(normalTrain))
Train <- rbind(cancerousTrain, normalTrain)
# creating test set
test <- read.delim("DiscreteBoth/pert2205_attr", header=FALSE, row.names=1) %>% t() %>% as.data.frame()
testSuccess <- read.delim("../../insilico_perturbations/testSet.txt", header=FALSE, row.names=1)
names(testSuccess) <- names(test)
# Classifying a perturbation we deemed successful based on readout nodes
kn2 <- knn(train = Train[,-117], test = test, cl = Train$class, k = 10)
res <- data.frame("attractor" = "perturbation 2205", "cluster"= as.character(kn2), stringsAsFactors = FALSE)
res
# Classifying all perturbations we deemed successful
kn3 <- knn(train = Train[,-117], test = testSuccess, cl = Train$class, k =10)
res <- data.frame("attractor" = row.names(testSuccess), "cluster"= as.character(kn3), stringsAsFactors = FALSE)
res
misClass <- res %>% filter(cluster == "cancerous")
misClass <- misClass$attractor
misClass
# training set is still those that clustered together in discrete double
test_all_pert <- read.delim('../../insilico_perturbations/testSet_allPerturb.txt', header = FALSE, row.names = 1)
names(test_all_pert) <- names(test)
kn4 <- knn(train = Train[,-117], test = test_all_pert, cl = Train$class, k =10)
res <- data.frame("attractor" = row.names(test_all_pert), "cluster"= as.character(kn4), stringsAsFactors = FALSE)
res
ca <- res %>% filter(cluster == "cancerous")
norm <- res %>% filter(cluster == "normal")
# Adding an "other" classification to training set - all attractors that did not cluster with 231 or 10A
otherTrain <- read.delim('DiscreteBoth/Other_attrs.txt', header = TRUE, row.names = 1)
otherTrain$class <- rep("other", nrow(otherTrain))
Train2 <- rbind(otherTrain, Train)
kn5 <- knn(train = Train2[,-117], test = test_all_pert, cl = Train2$class, k =10)
res <- data.frame("attractor" = row.names(test_all_pert), "cluster"= as.character(kn4), stringsAsFactors = FALSE)
res
ca <- res %>% filter(cluster == "cancerous")
norm <- res %>% filter(cluster == "normal")
other <- res %>% filter(cluster == "other")
View(Train2)
Train2$class
kn5 <- knn(train = Train2[,-117], test = test_all_pert, cl = Train2$class, k =5)
res
res <- data.frame("attractor" = row.names(test_all_pert), "cluster"= as.character(kn4), stringsAsFactors = FALSE)
res
ca <- res %>% filter(cluster == "cancerous")
norm <- res %>% filter(cluster == "normal")
other <- res %>% filter(cluster == "other")
other
ca
head(nrom)
head(norm)
head(ca)
head(other)
kn5 <- knn(train = Train2[,-117], test = test_all_pert, cl = Train2$class, k = 10)
kn5 <- knn(train = Train2[,-117], test = test_all_pert, cl = Train2$class, k = 10)
res <- data.frame("attractor" = row.names(test_all_pert), "cluster"= as.character(kn4), stringsAsFactors = FALSE)
res
ca <- res %>% filter(cluster == "cancerous")
norm <- res %>% filter(cluster == "normal")
other <- res %>% filter(cluster == "other")
ca$attractor
ca$attractor
# training set is still those that clustered together in discrete double
test_all_pert <- read.delim('../../insilico_perturbations/testSet_allPerturb.txt', header = FALSE, row.names = 1)
names(test_all_pert) <- names(test)
kn4 <- knn(train = Train[,-117], test = test_all_pert, cl = Train$class, k =10)
res <- data.frame("attractor" = row.names(test_all_pert), "cluster"= as.character(kn4), stringsAsFactors = FALSE)
res
ca <- res %>% filter(cluster == "cancerous")
norm <- res %>% filter(cluster == "normal")
ca$attractor
# Adding an "other" classification to training set - all attractors that did not cluster with 231 or 10A
otherTrain <- read.delim('DiscreteBoth/Other_attrs.txt', header = TRUE, row.names = 1)
otherTrain$class <- rep("other", nrow(otherTrain))
Train2 <- rbind(otherTrain, Train)
kn5 <- knn(train = Train2[,-117], test = test_all_pert, cl = Train2$class, k = 10)
res <- data.frame("attractor" = row.names(test_all_pert), "cluster"= as.character(kn4), stringsAsFactors = FALSE)
res
ca <- res %>% filter(cluster == "cancerous")
norm <- res %>% filter(cluster == "normal")
other <- res %>% filter(cluster == "other")
ca$attractor
# training set is still those that clustered together in discrete double
test_all_pert <- read.delim('../../insilico_perturbations/testSet_allPerturb.txt', header = FALSE, row.names = 1)
names(test_all_pert) <- names(test)
kn4 <- knn(train = Train[,-117], test = test_all_pert, cl = Train$class, k =10)
res <- data.frame("attractor" = row.names(test_all_pert), "cluster"= as.character(kn4), stringsAsFactors = FALSE)
res
ca1 <- res %>% filter(cluster == "cancerous")
norm1 <- res %>% filter(cluster == "normal")
ca$attractor
# Adding an "other" classification to training set - all attractors that did not cluster with 231 or 10A
otherTrain <- read.delim('DiscreteBoth/Other_attrs.txt', header = TRUE, row.names = 1)
otherTrain$class <- rep("other", nrow(otherTrain))
Train2 <- rbind(otherTrain, Train)
kn5 <- knn(train = Train2[,-117], test = test_all_pert, cl = Train2$class, k = 10)
res <- data.frame("attractor" = row.names(test_all_pert), "cluster"= as.character(kn4), stringsAsFactors = FALSE)
res
ca2 <- res %>% filter(cluster == "cancerous")
norm2 <- res %>% filter(cluster == "normal")
other2 <- res %>% filter(cluster == "other")
c <- rbind(ca1,ca2)
unique(c$attractor)
View(c)
c <- c(ca1$attractor, ca2$attractor)
unique(c$attractor)
unique(c)
ca2$attractor
c <- c(ca1$attractor, ca2$attractor) %>% as.list()
unique(c)
sum()
sum
?sum()
test
test[1]
test[1,1]
testAll
ca
row <- ca[2,]
row
row[1]
row[2]
typeof(row[1])
as.character(row[1])
test <- read.delim("C:/Users/gastonguay/Desktop/test.txt")
View(test)
source('~/.active-rstudio-document')
setwd("~/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/Clustering")
knitr::opts_chunk$set(echo = FALSE)
library(devtools)
library(ggplot2)
library(tidyverse)
library(cluster)
library(HSAUR)
library(fpc)
library(NMF)
library(ggfortify)
library(factoextra)
library(dendextend)
library(ClassDiscovery)
library(magrittr)
library(MASS)
library(class)
source('~/.active-rstudio-document')
pdf("TEST.pdf")
testdf <- test %>% t() %>% as.data.frame()
# PCA scree and biplot
pca <- prcomp(testdf, center = TRUE)
test <- read.delim("C:/Users/gastonguay/Desktop/test.txt", row.names=1)
View(test)
pdf("TEST.pdf")
testdf <- test %>% t() %>% as.data.frame()
# PCA scree and biplot
pca <- prcomp(testdf, center = TRUE)
screeplot(pca)
biplot(pca)
# Hierarchical
class <- c("cancerous", "normal", rep("unknown", 8))
hclust <- hclust(dist(scale(testdf)), method = "complete")
plotColoredClusters(hclust, class, c("red", "blue", rep("gray",8)), cex = 0.8, main = "", line = 0)
View(testdf)
testdf <- test
# PCA scree and biplot
pca <- prcomp(testdf, center = TRUE)
screeplot(pca)
biplot(pca)
# Hierarchical
class <- c("cancerous", "normal", rep("unknown", 8))
hclust <- hclust(dist(scale(testdf)), method = "complete")
plotColoredClusters(hclust, class, c("red", "blue", rep("gray",8)), cex = 0.8, main = "", line = 0)
pdf("TEST.pdf")
testdf <- test
# PCA scree and biplot
pca <- prcomp(testdf, center = TRUE)
screeplot(pca)
biplot(pca)
# Hierarchical
class <- c("cancerous", "normal", rep("unknown", 10))
hclust <- hclust(dist(scale(testdf)), method = "complete")
plotColoredClusters(hclust, class, c("red", "blue", rep("gray",10)), cex = 0.8, main = "", line = 0)
all_h_2 <- hclust %>% cutree(k = 2) %>% as.data.frame() %>% set_colnames("A_hierarchical_2")
all_h_3 <- hclust %>% cutree(k = 3) %>% as.data.frame() %>% set_colnames("A_hierarchical_3")
# Heatmap
aheatmap(all,scale = 'row',  Rowv = NA, Colv = 3L, cellwidth = 10, cellheight = 30, hclustfun = "complete",color=colorRampPalette(c('navy','white','firebrick3'))(80), filename = "raw_heatmap.pdf")
#MDS
mds1 <- cmdscale(dist(testdf),eig=TRUE, k=2) # k is the number of dim
x <- mds1$points[-c(1,2),1]
y <- mds1$points[-c(1,2),2]
ggplot(as.data.frame(mds1$points[-c(1,2),]), aes(x, y)) + geom_text( label = rownames(mds1$points[-c(1,2),]), color = "gray") + geom_text(data = mds1$points[1:2,], aes(x=mds1$points[1:2,1], y= mds1$points[1:2,2] ), label = rownames(mds1$points[c(1,2),]), color = c("red", "blue")) + xlab("Coordinate 1") + ylab("Coordinate 2") + ggtitle("Metric MDS")+ theme_bw()
# Silohouette plot
fviz_nbclust(testdf, kmeans)
fviz_nbclust(testdf, kmeans, method = "wss")
#K-means
k2_raw <- kmeans(testdf, centers = 2, nstart = 10000, iter.max = 30)
plotcluster(testdf, k2_raw$cluster, bw = FALSE)
all_km_2 <- k2_raw$cluster %>% as.data.frame() %>% set_colnames("A_KM_2")
k3_raw <- kmeans(testdf, centers = 3, nstart = 10000, iter.max = 30)
plotcluster(testdf, k3_raw$cluster, bw = FALSE)
all_km_3 <- k3_raw$cluster %>% as.data.frame() %>% set_colnames("A_KM_3")
dev.off()
source('~/.active-rstudio-document')
pdf("TEST.pdf")
testdf <- test
# PCA scree and biplot
pca <- prcomp(testdf, center = TRUE)
screeplot(pca)
biplot(pca)
dev.off()
pdf("TEST.pdf")
testdf <- test
# PCA scree and biplot
pca <- prcomp(testdf, center = TRUE)
screeplot(pca)
biplot(pca)
dev.off()
library(ClassDiscovery)
library(tidyverse)
library(devtools)
library(magrittr)
library(factoextra)
library(fpc)
library(ggfortify)
library(dendextend)
library(NMF)
testdf <- test %>% t() %>% as.data.frame()
test <- read.delim("C:/Users/gastonguay/Desktop/test.txt", row.names=1)
View(test)
testdf <- test %>% t() %>% as.data.frame()
fviz_nbclust(testdf, kmeans, method = "gap_stat")
# Silohouette plot
fviz_nbclust(testdf, kmeans, method = "silhouette")
fviz_nbclust(testdf, kmeans, method = "wss")
fviz_nbclust(testdf, kmeans, method = "gap_stat")
fviz_nbclust(testdf, kmeans, method = "wss")
# Silohouette plot
fviz_nbclust(testdf, kmeans, method = "silhouette")
hey <- fviz_nbclust(testdf, kmeans, method = "gap_stat")
hey
data <- hey$data
data
.632-.013
.699-.014
k5_raw <- kmeans(testdf, centers = 5, nstart = 10000, iter.max = 30)
plotcluster(testdf, k5_raw$cluster, bw = FALSE)
k3_raw <- kmeans(testdf, centers = 3, nstart = 10000, iter.max = 30)
plotcluster(testdf, k3_raw$cluster, bw = FALSE)
hey
?fviz_gap_stat
hey
?clusGap
thing <- clusGAp(testdf, kmeans, 10)
thing <- clusGap(testdf, kmeans, 10)
fviz_gap_stat(thing, maxSE = list(method = "Tibs2001SEmax"))
hey <- fviz_nbclust(testdf, kmeans, method = "gap_stat")
hey
thing <- clusGap(testdf, kmeans, 10)
fviz_gap_stat(thing, maxSE = list(method = "Tibs2001SEmax"))
hey2 <- fviz_gap_stat(thing, maxSE = list(method = "Tibs2001SEmax"))
thing <- clusGap(testdf, kmeans, 10, B = 500)
hey2 <- fviz_gap_stat(thing,maxSE = list(method = "Tibs2001SEmax"))
hey2
hey
fviz_nbclust(testdf, kmeans, method = "wss")
# Silohouette plot
fviz_nbclust(testdf, kmeans, method = "silhouette")
gap_stat <- clusGap(x = testdf, FUN = kmeans, K.max = 15, nstart = 10000, B = 500 )
gap_stat <- clusGap(x = testdf, FUN = kmeans, K.max = 15, nstart = 100, B = 500 )
fviz_gap_stat(gap_stat)
fviz_gap_stat(gap_stat, mazSE = list(method = "Tibs2001SEmax"))
fviz_gap_stat(gap_stat, maxSE = list(method = "Tibs2001SEmax"))
l <- fviz_gap_stat(gap_stat, maxSE = list(method = "Tibs2001SEmax"))
l
l$Classes
l$:Classes
l$
s
l$data
?maxSE
maxSE(l$gap, l$SE.sim)
maxSE(l$data$gap, l$data$SE.sim)
maxSE(l$data$gap, l$data$SE.sim, method = "Tibs2001SEmax")
?clusGap
clusGap(testdf, kmeans, 10, B = 500, iter.max = 3-)
clusGap(testdf, kmeans, 10, B = 500, iter.max = 30)
thing <- clusGap(testdf, kmeans, 10, B = 500, iter.max = 30)
fviz_gap_stat(thing,maxSE = list(method = "Tibs2001SEmax"))
thing <- clusGap(testdf, kmeans, 10, B = 500, iter.max = 30)
hey2 <- fviz_gap_stat(thing,maxSE = list(method = "Tibs2001SEmax"))
thing <- clusGap(testdf, kmeans, 10, B = 500, iter.max = 30, nstart = 1--)
thing <- clusGap(testdf, kmeans, 10, B = 500, iter.max = 30, nstart = 100)
thing
hey2 <- fviz_gap_stat(thing,maxSE = list(method = "Tibs2001SEmax"))
hey2
?clusGap
?row.names
?fviz_nbclust
hey2 <- fviz_gap_stat(thing,maxSE = list(method = "Tibs2001SEmax"))
hey2
thing2 <- clusGap(testdf, kmeans, 10, B = 500, iter.max = 30, nstart = 25)
hey3 <- fviz_gap_stat(thing2,maxSE = list(method = "Tibs2001SEmax"))
hey3
thing3 <- clusGap(testdf, kmeans, 10, B = 500, iter.max = 30, nstart = 1000)
fviz_gap_stat(thing3,maxSE = list(method = "Tibs2001SEmax"))
?write.table
setwd("~/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/Clustering")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/Clustering")
k2 <- read.table("Cluster Both Discrete/cluster_Both_discrete_kmeans_2.txt", header = TRUE, row.names = 1)
k3 <- read.table("Cluster Both Discrete/cluster_Both_discrete_kmeans_3.txt", header = TRUE, row.names = 1)
km1 <- cbind(k2, k3)
head(km1)
discData <- data.frame(
"logW","E.logW","gap","SE.sim","clusters","ymin","ymax",
8.824538,9.410792,0.5862533,0.000938934,1,0.5853144,0.5871923,
8.812675,9.400057,0.5873822,0.00098387,2,0.5863983,0.5883661,
8.798686,9.39353,0.5948447,0.000978895,3,0.5938658,0.5958236,
8.790389,9.388764,0.5983754,0.000957613,4,0.5974178,0.599333,
8.78424,9.3851,0.6008596,0.000894306,5,0.5999653,0.601754,
8.779811,9.38193,0.6021191,0.000849677,6,0.6012694,0.6029688,
8.776449,9.37916,0.6027107,0.000873278,7,0.6018374,0.603584,
8.774337,9.376552,0.6022152,0.000853724,8,0.6013615,0.6030689,
8.768567,9.374162,0.6055954,0.000829376,9,0.604766,0.6064248,
8.76705,9.371869,0.6048187,0.000809403,10,0.6040093,0.6056281,
header = TRUE
)
View(discData)
discData <- data.frame(nrow = 10,
"logW","E.logW","gap","SE.sim","clusters","ymin","ymax",
8.824538,9.410792,0.5862533,0.000938934,1,0.5853144,0.5871923,
8.812675,9.400057,0.5873822,0.00098387,2,0.5863983,0.5883661,
8.798686,9.39353,0.5948447,0.000978895,3,0.5938658,0.5958236,
8.790389,9.388764,0.5983754,0.000957613,4,0.5974178,0.599333,
8.78424,9.3851,0.6008596,0.000894306,5,0.5999653,0.601754,
8.779811,9.38193,0.6021191,0.000849677,6,0.6012694,0.6029688,
8.776449,9.37916,0.6027107,0.000873278,7,0.6018374,0.603584,
8.774337,9.376552,0.6022152,0.000853724,8,0.6013615,0.6030689,
8.768567,9.374162,0.6055954,0.000829376,9,0.604766,0.6064248,
8.76705,9.371869,0.6048187,0.000809403,10,0.6040093,0.6056281,
header = TRUE
)
?data.frame()
discData <- data.frame(nrow = 11,
"logW","E.logW","gap","SE.sim","clusters","ymin","ymax",
8.824538,9.410792,0.5862533,0.000938934,1,0.5853144,0.5871923,
8.812675,9.400057,0.5873822,0.00098387,2,0.5863983,0.5883661,
8.798686,9.39353,0.5948447,0.000978895,3,0.5938658,0.5958236,
8.790389,9.388764,0.5983754,0.000957613,4,0.5974178,0.599333,
8.78424,9.3851,0.6008596,0.000894306,5,0.5999653,0.601754,
8.779811,9.38193,0.6021191,0.000849677,6,0.6012694,0.6029688,
8.776449,9.37916,0.6027107,0.000873278,7,0.6018374,0.603584,
8.774337,9.376552,0.6022152,0.000853724,8,0.6013615,0.6030689,
8.768567,9.374162,0.6055954,0.000829376,9,0.604766,0.6064248,
8.76705,9.371869,0.6048187,0.000809403,10,0.6040093,0.6056281,
header = TRUE
)
disc <- read.csv("test.txt", header = TRUE, row.names = 1, sep = " ")
setwd("~/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/Clustering/Cluster Both Discrete")
disc <- read.csv("test.txt", header = TRUE, row.names = 1, sep = " ")
gapstat1 <- clusGap(disc, kmeans, 10, B = 500, iter.max = 30, nstart = 100)
gapstat1 <- clusGap(disc, kmeans, 10, iter.max = 30)
plot1 <- fviz_gap_stat(gapstat1, maxSE = list(method = "Tibs2001SEmax"))
plot1
discData <- plot1$data
discData
