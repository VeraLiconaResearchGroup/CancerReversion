means <- replicate(10000, mean(rexp(5,1)))
summar(rexp(5,1))
summary(rexp(5,1))
var(rexp(5,1))
var(rexp(100000,1))
mean(rexp(100000,1))
?dnorm
pnorm(.5)
qnorm(.5)
dnorm(0)
pnorm(0)
pnorm(3)
qnorm(.999])
qnorm(.999)
k <- seq(-1,1, length = 200)
plot(k, pnorm(k))
plot(k, qnorm(k))
plot(k, qnorm(pnorm(k)))
plot(k, pnorm(k))
plot(k, dnorm(k))
?rexp
?gamma
?rgamma
?rchisq
?runif
qnorm(.3)
pnorm(.3)
pnorm(1)
dnorm(1)
dnorm(0)
plot(k, dnorm(k))
k <- seq(-5,5, length = 200)
plot(k, dnorm(k))
plot(k, dnorm(k), type = 'l')
max(dnorm(k))
qnorm(.25)
abline(v = qnorm(.25))
abline(v = qnorm(.25), col = "yellow")
abline(v = qnorm(.25), col = "red")
abline(v = qnorm(.75), col = "red")
abline(v = qnorm(.95), col = "red")
abline(v = qnorm(.05), col = "red")
lines(k, pnorm(k), col = "blue")
plot(k, pnorm(k))
plot(k, dnorm(k), type = 'l', ylim = c(0,1))
abline(v = qnorm(.25))
abline(v = qnorm(.25), col = "red")
abline(v = qnorm(.75), col = "red")
lines(k, pnorm(k), col = "blue")
points(k, qnorm(pnorm(k)), pch = 17)
points(k, pnorm(qnorm(k)), pch = 17)
# Enter the appropriate R command here:
pulseData <- read.csv("pulse.csv")
# Enter the appropriate R command here:
high <- Pulse1 + Pulse2 >149
high
# Enter the appropriate R command here:
high <- (Pulse1 + Pulse2) >149
high
# Enter the appropriate R command here:
pulseData$Activity <- factor(Activity, levels = c(1,2,3), ordered = TRUE, labels= c("Slight", "Moderate", "Considerable"))
str(pulseData)
attach(pulseData) # line 1
plot(Height, Weight, pch=ifelse(Smokes==1,19,17)) # line 2
# Comment line 2:
#plotting Weight agains Height. Ploting circles if regular smoker, triangle if not regular smoker
title(main="Height x Weight plot") # line 3
# Comment line 3:
#Adding a title to the plot
detach(pulseData)  # line 4
div <- function(x,y){
div < X/y
return(round(div,1))
}
# Wrong assingment, X instead of x, rounding wrong
div <- function(x,y){
div <- x/y
return(round(div,0))
}
fun <- function(x) log10(x^2)/(3*x+4)
fun(1)
x <- "Statistcal Computing 3675Q - 2019"
# Enter the appropriate R command here:
x[(nchar(x)-3):nchar(x)]
x <- "Statistcal Computing 3675Q - 2019"
# Enter the appropriate R command here:
x[(nchar(x)-3):nchar(x)]
# Enter the appropriate R command here:
nchar(x)
# Enter the appropriate R command here:
nchar(x)-3
# Enter the appropriate R command here:
x[(nchar(x)-3):nchar(x)]
substr(x, nchar(x)-3, nchar(x))
# Enter the appropriate R command here:
y <- unlist(strsplit(x, " "))
y
?sub
# Enter the appropriate R command here:
sub(" ", "__", x)
# Enter the appropriate R command here:
gsub(" ", "__", x)
# Enter the appropriate R command here:
gsub(" ", "__", y)
?grep
grep(" ", x)
x
grep("t", y)
y
grep("t", x)
x
# Enter the appropriate R command here:
sub("2019", "FALL", x)
sub("t", " ", x)
gsub("t", " ", x)
attach(pulseData)
plot(Pulse1, Pulse2,
xlim = c(min(Pulse1, Pulse2), max(Pulse1, Pulse2)),
ylim = c(min(Pulse1, Pulse2), max(Pulse1, Pulse2)),
main="title",
xlab="Pulse1",
ylab= "Pulse2",
pch= ifelse(gender == "M", 17, 19)
col= ifelse(smokes == 1, "blue", "red"))
attach(pulseData)
plot(Pulse1, Pulse2,
xlim = c(min(Pulse1, Pulse2), max(Pulse1, Pulse2)),
ylim = c(min(Pulse1, Pulse2), max(Pulse1, Pulse2)),
main="title",
xlab="Pulse1",
ylab= "Pulse2",
pch= ifelse(gender == "M", 17, 19),
col= ifelse(smokes == 1, "blue", "red"))
smokes
attach(pulseData)
plot(Pulse1, Pulse2,
xlim = c(min(Pulse1, Pulse2), max(Pulse1, Pulse2)),
ylim = c(min(Pulse1, Pulse2), max(Pulse1, Pulse2)),
main="title",
xlab="Pulse1",
ylab= "Pulse2",
pch= ifelse(gender == "M", 17, 19),
col= ifelse(Smokes == 1, "blue", "red"))
detach(pulseData)
expn <- function(x,n){
if(n <0) cat("n must be positive"); return(c())
sum <- 0
for(i in 0:n){
t <- x^i/factorial(i)
t
sum <- sum + t
}
return(sum)
}
expn(4)
expn(2, 4)
expn(2, 4)
expn(2, 4)
expn(2, 5)
expn <- function(x,n){
if(n <0) {cat("n must be positive"); return(c())}
sum <- 0
for(i in 0:n){
t <- x^i/factorial(i)
t
sum <- sum + t
}
return(sum)
}
expn(2, 5)
expn <- function(x,n){
if(n <0) {cat("n must be positive"); return(c())}
sum <- 0
for(i in 0:n){
t <- x^i/factorial(i)
t
sum <- sum + t
}
return(sum)
}
expn(5, 5)
expn <- function(x,n){
if(n <0) {cat("n must be positive"); return(c())}
sum <- 0
for(i in 0:n){
t <- x^i/factorial(i)
print(t)
sum <- sum + t
}
return(sum)
}
expn(5, 5)
# Enter the appropriate R command here:
x <- seq(0, 5, length = 200)
plot(x, dgamma(x, shape = .1, rate = 0.01))
# Enter the appropriate R command here:
x <- seq(0, 3, length = 200)
curve(x, dgamma(x, shape = .1, rate = 0.01))
?cruve
?curve
# Enter the appropriate R command here:
x <- seq(0, 3, length = 200)
plot(x, dgamma(x, shape = .1, rate = 0.01), type = 'l)
# Enter the appropriate R command here:
x <- seq(0, 3, length = 200)
plot(x, dgamma(x, shape = .1, rate = 0.01), type = 'l')
# Enter the appropriate R command here:
x <- seq(-3, 3, length = 200)
plot(x, dgamma(x, shape = .1, rate = 0.01), type = 'l')
# Enter the appropriate R command here:
x <- seq(0, 3, length = 200)
plot(x, dgamma(x, shape = .1, rate = 0.01), type = 'l')
# Enter the appropriate R command here:
x <- seq(0, 2, length = 200)
plot(x, dgamma(x, shape = .1, rate = 0.01), type = 'l')
# Enter the appropriate R command here:
rgamma(500, shape = .1, rate = 0.01)
# Enter the appropriate R command here:
means <- replicate(1000, mean(rgamma(500, shape = .1, rate = .01)))
# Enter the appropriate R command here:
hist(means, freq= FALSE)
# Enter the appropriate R command here:
k <- seq(5,15, length = 200)
# Enter the appropriate R command here:
k <- seq(5,15, length = 200)
hist(means, freq= FALSE)
lines(k, dnrom(k, 10, sqrt(1000/500)), col = "red")
# Enter the appropriate R command here:
k <- seq(5,15, length = 200)
hist(means, freq= FALSE)
lines(k, dnorm(k, 10, sqrt(1000/500)), col = "red")
# Enter the appropriate R command here:
k <- seq(min(means)-2,max(means)+2, length = 200)
hist(means, freq= FALSE)
lines(k, dnorm(k, 10, sqrt(1000/500)), col = "red")
# Enter the appropriate R command here:
quantile(c(.025, .975), means)
# Enter the appropriate R command here:
quantile(means, c(.025, .975))
# Enter the appropriate R command here:
qnorm(c(.025, .975), mean = 10, sd = 10)
# Enter the appropriate R command here:
quantile(means, c(.025, .975))
# Enter the appropriate R command here:
qnorm(c(.025, .975), mean = 10, sd = 10)
# Enter the appropriate R command here:
qnorm(c(.025, .975), mean = 10, sd = 100)
# Enter the appropriate R command here:
qnorm(c(.025, .975), mean = 10, sd = 10)
# Enter the appropriate R command here:
is.na(Arthritis)
na.omit(Arthritis)
Art <- na.omit(Arthritis)
# Enter the appropriate R command here:
addmargins(xtabs)
# Enter the appropriate R command here:
addmargins(mytable)
# Enter the appropriate R command here:
tab <- table.prop(mytable)
# Enter the appropriate R command here:
tab <- prop.table(mytable)
# Enter the appropriate R command here:
tab <- prop.table(mytable)
tab
addmargins(tab)
mytable
addmargins(mytable)
# Enter the appropriate R command here:
chisq.test(mytable)
cstest <- chisq.test(mytable)
cstest
UScrime
# Enter the appropriate R command here:
library(MASS)
wilcox.test(Prob ~ So, data = UScrime)
qqnorm(UScrime$Prob[UScrime$So == 0])
qqnorm(UScrime$Prob[UScrime$So == 1])
# Enter the appropriate R command here:
t.test(Prob ~ So, data = UScrime)
10e-2
2e-4
e <- c(10e-2, 2e-4)
n <- 3
e <- c(10e-2, 2e-4)
n <- 2
while(e[n]>=10e-14){
e[n+1] <- abs(e[n]^2 * 2e4)
print(n)
}
e <- c(10e-2, 2e-4)
n <- 2
while(e[n]>=10e-14){
e[n+1] <- abs(e[n]^2 * 2e4)
print(n)
n <- n+1
}
while(e[n]>=10e-14){
e[n+1] <- abs(e[n]^2 * 2e4)
print(e[n+1])
n <- n+1
}
e <- c(10e-2, 2e-4)
n <- 2
while(e[n]>=10e-14){
e[n+1] <- abs(e[n]^2 * 2e4)
print(e[n+1])
n <- n+1
}
2e4*(8e-4)^2
8e-4
e4 .- 2*10^-4
e4 <- 2*10^-4
e3 <- 10^-2
e4/(e3^2)
2/10^-4
2/(10^-4)
(2x10^-4)/10^-4
(2*10^-4)/10^-4
2*(2*10^-4)^2
(2*10^-4)^2
e <- c(10e-2, 2e-4)
n <- 2
while(e[n]>=10e-14){
e[n+1] <- abs(e[n]^2 * 2)
print(e[n+1])
n <- n+1
}
81*2
162e-16
64*2
128e-14-10e-14
install.packages("reticulate")
library(reticulate)
c("hkdjfhkedf University", "pizze", "University of blach")
t <- c("hkdjfhkedf University", "pizze", "University of blach")
length(grep("University", t))
# Load libs
library(reticulate)
# Load libs
library(reticulate)
setwd("~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/Clustering")
source_python("kmeans_both_sklearn.py")
pd <- import("pandas")
?text
paste("Kmeans6.pdf",sep="")
library(car)
?lm
fit <- lm(income ~ education, data = Anscombe)
fit
summary(fit)
str(Anscombe)
ftable(Anscombe)
shapiro.test(fit$residuals)
shapiro.test(summary(fit)$residuals)
shapiro.test(summary(fit)$residuals)
qqnorm(fit$residuals)
qqnorm(summary(fit)$residuals)
plot(Anscombe$education, fit$residuals)
abline(h = 0 , col = "red")
shapiro.test(fit$residuals)
qqnorm(fit$residuals)
plot(Anscombe$education, fit$residuals)
abline(h = 0 , col = "red")
shapiro.test(fit$residuals)
qqnorm(fit$residuals)
plot(Anscombe$education, fit$residuals)
abline(h = 0 , col = "red")
plot(fit$fitted.values, fit$residuals)
abline(h = 0 , col = "red")
shapiro.test(fit$residuals)
qqnorm(fit$residuals)
plot(Anscombe$education, fit$residuals)
abline(h = 0 , col = "red")
plot(fit$fitted.values, summary(fit)$residuals)
abline(h = 0 , col = "red")
z <- rstudent(fit)
plot(Anscombe$education, z)
abline(h=0,col=2,lwd=2)
abline(h=2, col=3,lwd=2, lty=2)
shapiro.test(fit$residuals)
qqnorm(fit$residuals)
plot(Anscombe$education, fit$residuals)
abline(h = 0 , col = "red")
plot(fit$fitted.values, summary(fit)$residuals)
abline(h = 0 , col = "red")
z <- rstudent(fit)
plot(Anscombe$education, z)
abline(h=0,col=2,lwd=2)
abline(h=2, col=3,lwd=2, lty=2)
abline(h=-2,col=3,lwd=2, lty=2)
plot(fit$fitted.values, z)
abline(h=0,col=2,lwd=2)
abline(h=2, col=3,lwd=2, lty=2)
shapiro.test(fit$residuals)
qqnorm(fit$residuals)
plot(Anscombe$education, fit$residuals)
abline(h = 0 , col = "red")
plot(fit$fitted.values, summary(fit)$residuals)
abline(h = 0 , col = "red")
z <- rstudent(fit)
plot(fit$fitted.values, z)
abline(h=0,col=2,lwd=2)
abline(h=2, col=3,lwd=2, lty=2)
abline(h=-2,col=3,lwd=2, lty=2)
shapiro.test(fit$residuals)
qqnorm(fit$residuals)
plot(Anscombe$education, fit$residuals)
abline(h = 0 , col = "red")
plot(fit$fitted.values, summary(fit)$residuals)
abline(h = 0 , col = "red")
z <- rstudent(fit)
plot(Anscombe$education, z)
abline(h=0,col=2,lwd=2)
abline(h=2, col=3,lwd=2, lty=2)
abline(h=-2,col=3,lwd=2, lty=2)
plot(fit$fitted.values, z)
abline(h=0,col=2,lwd=2)
abline(h=2, col=3,lwd=2, lty=2)
abline(h=-2,col=3,lwd=2, lty=2)
cutoff <- 4/(nrow(Anscombe)-length(fit$coefficients))
plot(fit, which=4, cook.levels=cutoff)
abline(h=cutoff, lty=2, col="red")
influencePlot(fit, id.method="identify", main="Influence Plot", sub="Circle size is proportial to Cook’s Distance" )
cutoff <- 4/(nrow(Anscombe)-length(fit$coefficients))
plot(fit, which=4, cook.levels=cutoff)
abline(h=cutoff, lty=2, col="red")
influencePlot(fit, id.method="identify", main="Influence Plot", sub="Circle size is proportial to Cook’s Distance" )
cutoff
cutoff <- 4/(nrow(Anscombe)-length(fit$coefficients))
cutoff
plot(fit, which=4, cook.levels=cutoff)
abline(h=cutoff, lty=2, col="red")
influencePlot(fit, id.method="identify", main="Influence Plot", sub="Circle size is proportial to Cook’s Distance" )
plot(income, education, data = Anscombe)
attach(Anscombe)
plot(income, education)
attach(Anscombe)
plot(income, education)
abline(fit, col = "red")
# attach(Anscombe)
plot(income, education)
abline(fit, col = "red")
abline(fit, col = "red")
# attach(Anscombe)
plot(income, education)
abline(fit, col = "red")
# attach(Anscombe)
plot(income, education)
abline(fit)
plot(fit)
# attach(Anscombe)
plot(income, education)
abline(fit)
fit
# attach(Anscombe)
plot(income, education)
abline(fit)
fit
# attach(Anscombe)
plot(income, education)
# attach(Anscombe)
plot(income, education, ylim = c(0,2000))
abline(fit)
# attach(Anscombe)
plot(income, education, ylim = c(0,2000))
abline(fit)
fit
# attach(Anscombe)
plot(income, education, ylim = c(0,2000))
abline(fit, col = "red")
fit
fit <- lm(income ~ education, data = Anscombe)
fit
fit <- lm(income ~ education, data = Anscombe)
fit
# attach(Anscombe)
plot(education, income)
# attach(Anscombe)
plot(education, income)
abline(fit, col = "red")
row.names(Anscombe)
# attach(Anscombe)
plot(education, income)
abline(fit, col = "red")
text(Anscombe["AK","education"], Anscombe["AK", "income"], "AK")
?text
# attach(Anscombe)
plot(education, income)
abline(fit, col = "red")
text(Anscombe["AK","education"], Anscombe["AK", "income"], "AK", pos = 3)
text(Anscombe["AK","education"], Anscombe["AK", "income"], "AK", pos = 3, font = 2)
# attach(Anscombe)
plot(education, income)
abline(fit, col = "red")
text(Anscombe["AK","education"], Anscombe["AK", "income"], "AK", pos = 3, font = 2)
# attach(Anscombe)
plot(education, income)
abline(fit, col = "red")
text(Anscombe["AK","education"], Anscombe["AK", "income"], "AK", pos = 3, font = 2, col = "blue")
text(Anscombe["AK","education"], Anscombe["AK", "income"], "AK", pos = 3, font = 2, col = "blue")
# attach(Anscombe)
plot(education, income)
abline(fit, col = "red")
text(Anscombe["AK","education"], Anscombe["AK", "income"], "AK", pos = 3, font = 2, col = "blue")
# attach(Anscombe)
plot(education, income)
abline(fit, col = "red")
text(Anscombe["AK","education"], Anscombe["AK", "income"], "AK", pos = 3, font = 2)
# attach(Anscombe)
plot(education, income, main = "Income vs Education")
abline(fit, col = "red")
text(Anscombe["AK","education"], Anscombe["AK", "income"], "AK", pos = 3, font = 2)
