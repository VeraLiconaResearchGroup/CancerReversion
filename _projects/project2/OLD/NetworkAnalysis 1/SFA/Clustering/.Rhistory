fviz_nbclust(all_T, kmeans, method = "wss")
#K-means
# k2_raw <- kmeans(all_T, centers = 2, nstart = 10000, iter.max = 30)
plotcluster(all_T, k2_raw$cluster, bw = FALSE)
knitr::opts_chunk$set(echo = TRUE)
source("Clustering Functions.R") #read in file with functions for running clusters
library(devtools)
library(ggplot2)
library(ggfortify)
library(tidyverse)
library(readxl)
library(NMF)
library(factoextra)
library(cluster)    # clustering algorithms
library(HSAUR)
library(fpc)
df <- read.table("attractors_discrete.txt", header=FALSE, row.names=1)
knitr::opts_chunk$set(echo = TRUE)
source("Clustering Functions.R") #read in file with functions for running clusters
library(devtools)
library(ggplot2)
library(ggfortify)
library(tidyverse)
library(readxl)
library(NMF)
library(factoextra)
library(cluster)    # clustering algorithms
library(HSAUR)
library(fpc)
df <- read.table("attractors_discrete.txt", header=FALSE, row.names=1)
# Cancerous attractor (MDA-MB-231)
MBA <- read.table("../attractor_231.txt", row.names = 1) #Raw SFA output
MD231 <- read.table("../231_attractor_discrete", row.names = 1) #Discrete
# Normal attractor (MCF10A)
MCF10A <- read.table("../attractor_10A.txt", row.names = 1) #Raw SFA ouput
MCF <- read.table("../10A_attractor_discrete", row.names = 1) #Discrete
#Simulated attractors
attr <- read.table("../Identify Attractors/attractor_df.txt", row.names = 1) #Raw
sim <- read.table("../Identify Attractors/attractor_df_discrete.txt", row.names = 1) #Discrete
# Create a dataframe of all the raw values
temp <- cbind(MBA, MCF10A, attr)
all <- temp%>% round(3) #round raw vlaues to three decimals
names <- paste("attractor", seq(1:1000), sep = "")
names(all) <- c("attractor_231", "attractor_10A", names)
# Create a dataframe of all the discrete values
all_disc <- cbind(MD231, MCF, sim)
names(all_disc) <- names(all)
setwd("~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering")
# setwd("~/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering")
knitr::opts_chunk$set(echo = FALSE)
library(devtools)
library(ggplot2)
library(tidyverse)
library(cluster)
library(HSAUR)
library(fpc)
library(NMF)
library(ggfortify)
library(factoextra)
library(dendextend)
library(ClassDiscovery)
library(magrittr)
library(MASS)
# Cancerous attractor (MDA-MB-231)
MBA <- read.table("../attractor_231.txt", row.names = 1) #Raw SFA output
MD231 <- read.table("../231_attractor_discrete", row.names = 1) #Discrete
# Normal attractor (MCF10A)
MCF10A <- read.table("../attractor_10A.txt", row.names = 1) #Raw SFA ouput
MCF <- read.table("../10A_attractor_discrete", row.names = 1) #Discrete
#Simulated attractors
attr <- read.table("../Identify Attractors/attractor_df.txt", row.names = 1) #Raw
sim <- read.table("../Identify Attractors/attractor_df_discrete.txt", row.names = 1) #Discrete
# Create a dataframe of all the raw values
temp <- cbind(MBA, MCF10A, attr)
all <- temp%>% round(3) #round raw vlaues to three decimals
names <- paste("attractor", seq(1:1000), sep = "")
names(all) <- c("attractor_231", "attractor_10A", names)
# Create a dataframe of all the discrete values
all_disc <- cbind(MD231, MCF, sim)
names(all_disc) <- names(all)
# Raw value of DAC
DAC <- all
for( i in 1:ncol(all)){
DAC[,i] <- temp[,1] - temp[,i]
}
row.names(DAC)<- paste(row.names(DAC), "_DAC", sep = "")
DAC <- round(DAC, 3)
# Discretize DAC
disc <- function(x){
if(x < 0){
x <- -1
}else if(x > 0){
x <- 1
} else{
x <- 0
}
}
DAC_disc <- apply(DAC, c(1,2), disc) %>% as.data.frame()
both <- rbind(all, DAC)
both_disc <- rbind(all_disc, DAC_disc)
class <- c("cancerous", "normal", rep("unknown", 1000))
trials <- c(paste("A", seq(1:4), sep = "."), paste("B", seq(1:4), sep = "."), paste("C", seq(1:4), sep = "."), paste("D", seq(1:4), sep = "."), paste("E", seq(1:4), sep = "."), paste("F", seq(1:4), sep = "."))
all_disc_T <- all_disc %>% t() %>% as.data.frame()
# add label for coloring
# all_T$class <- c("Cancerous_MDA-MB-231", "Normal_MCF10A", rep("unknown", 1000))
# PCA scree and biplot
pca <- prcomp(all_disc_T, center = TRUE)
screeplot(pca)
biplot(pca)
# Hierarchical
hclust <- hclust(dist(scale(all_disc_T)), method = "complete")
plotColoredClusters(hclust, class, c("red", "blue", rep("gray",1000)), cex = 0.8, main = "", line = 0)
# Heatmap
aheatmap(all_disc,Rowv = NA, Colv = 3L, cellwidth = 10, cellheight = 30, hclustfun = "complete",color=colorRampPalette(c('navy','white','firebrick3'))(80), filename = "disc_heatmap.pdf")
#MDS
mds1 <- cmdscale(dist(all_disc_T),eig=TRUE, k=2) # k is the number of dim
x <- mds1$points[-c(1,2),1]
y <- mds1$points[-c(1,2),2]
ggplot(as.data.frame(mds1$points[-c(1,2),]), aes(x, y)) + geom_text( label = rownames(mds1$points[-c(1,2),]), color = "gray") + geom_text(data = mds1$points[1:2,], aes(x=mds1$points[1:2,1], y= mds1$points[1:2,2] ), label = rownames(mds1$points[c(1,2),]), color = c("red", "blue")) + xlab("Coordinate 1") + ylab("Coordinate 2") + ggtitle("Metric MDS") + theme_bw()
# Silohouette plot
fviz_nbclust(all_disc_T, kmeans)
fviz_nbclust(all_disc_T, kmeans, method = "wss")
#K-means
k2_disc <- kmeans(all_disc_T, centers = 2, nstart = 10000, iter.max = 30)
plotcluster(all_disc_T, k2_disc$cluster, bw = FALSE)
all_disc_km_2 <- k2_disc$cluster %>% as.data.frame() %>% set_colnames("B_KM_2")
k3_disc <- kmeans(all_disc_T, centers = 3, nstart = 10000, iter.max = 30)
plotcluster(all_disc_T, k3_disc$cluster, bw = FALSE)
all_disc_km_3 <- k3_disc$cluster %>% as.data.frame() %>% set_colnames("B_KM_3")
DAC_disc_T <- DAC_disc %>% t() %>% as.data.frame()
# add label for coloring
# all_T$class <- c("Cancerous_MDA-MB-231", "Normal_MCF10A", rep("unknown", 1000))
# PCA scree and biplot
pca <- prcomp(DAC_disc_T, center = TRUE)
screeplot(pca)
biplot(pca)
# Hierarchical
hclust <- hclust(dist(scale(DAC_disc_T)), method = "complete")
plotColoredClusters(hclust, class, c("red", "blue", rep("gray",1000)), cex = 0.8, main = "", line = 0)
DAC_disc_h_3 <- hclust %>% cutree(k=3) %>% as.data.frame() %>% set_colnames("D_hierarchical_3")
DAC_disc_h_4 <- hclust %>% cutree(k=4) %>% as.data.frame() %>% set_colnames("D_hierarchical_4")
# Heatmap
aheatmap(DAC_disc,Colv = 3L, cellwidth = 10, cellheight = 30, hclustfun = "complete",color=colorRampPalette(c('navy','white','firebrick3'))(80), filename = "DAC_disc_heatmap.pdf")
#MDS
mds1 <- cmdscale(dist(DAC_disc_T),eig=TRUE, k=2) # k is the number of dim
x <- mds1$points[-c(1,2),1]
y <- mds1$points[-c(1,2),2]
ggplot(as.data.frame(mds1$points[-c(1,2),]), aes(x, y)) + geom_text( label = rownames(mds1$points[-c(1,2),]), color = "gray") + geom_text(data = mds1$points[1:2,], aes(x=mds1$points[1:2,1], y= mds1$points[1:2,2] ), label = rownames(mds1$points[c(1,2),]), color = c("red", "blue")) + xlab("Coordinate 1") + ylab("Coordinate 2") + ggtitle("Metric MDS") + theme_bw()
# Silohouette plot
fviz_nbclust(DAC_disc_T, kmeans)
fviz_nbclust(DAC_disc_T, kmeans, method = "wss")
#K-means
k2_DAC_disc <- kmeans(DAC_disc_T, centers = 2, nstart = 10000, iter.max = 30)
plotcluster(DAC_disc_T, k2_DAC_disc$cluster, bw = FALSE)
k3_DAC_disc <- kmeans(DAC_disc_T, centers = 3, nstart = 10000, iter.max = 30)
plotcluster(DAC_disc_T, k3_DAC_disc$cluster, bw = FALSE)
DAC_disc_km_2 <- k2_DAC_disc$cluster %>% as.data.frame() %>% set_colnames("D_km_2")
DAC_disc_km_3 <- k3_DAC_disc$cluster %>% as.data.frame() %>% set_colnames("D_km_3")
both_disc_T <- both_disc %>% t() %>% as.data.frame()
# add label for coloring
# all_T$class <- c("Cancerous_MDA-MB-231", "Normal_MCF10A", rep("unknown", 1000))
# PCA scree and biplot
pca <- prcomp(both_disc_T, center = TRUE)
screeplot(pca)
biplot(pca)
# Hierarchical
hclust <- hclust(dist(scale(both_disc_T)), method = "complete")
plotColoredClusters(hclust, class, c("red", "blue", rep("gray",1000)), cex = 0.8, main = "", line = 0)
both_disc_h_h28 <- hclust %>% cutree(h=28) %>% as.data.frame() %>% set_colnames("F_hierarchical_10")
# Heatmap
aheatmap(both_disc, Colv = 3L, cellwidth = 10, cellheight = 30, hclustfun = "complete",color=colorRampPalette(c('navy','white','firebrick3'))(80), filename = "both_disc_heatmap.pdf")
#MDS
mds1 <- cmdscale(dist(both_disc_T),eig=TRUE, k=2) # k is the number of dim
x <- mds1$points[-c(1,2),1]
y <- mds1$points[-c(1,2),2]
ggplot(as.data.frame(mds1$points[-c(1,2),]), aes(x, y)) + geom_text( label = rownames(mds1$points[-c(1,2),]), color = "gray") + geom_text(data = mds1$points[1:2,], aes(x=mds1$points[1:2,1], y= mds1$points[1:2,2] ), label = rownames(mds1$points[c(1,2),]), color = c("red", "blue")) + xlab("Coordinate 1") + ylab("Coordinate 2") + ggtitle("Metric MDS") + theme_bw()
# Silohouette plot
fviz_nbclust(both_disc_T, kmeans)
fviz_nbclust(both_disc_T, kmeans, method = "wss")
#K-means
k2_both_disc <- kmeans(both_disc_T, centers = 2, nstart = 10000, iter.max = 30)
View(all_T)
plotcluster(both_disc_T, k2_both_disc$cluster, bw = FALSE)
both_disc_km_2 <- k2_both_disc$cluster %>% as.data.frame() %>% set_colnames("F_km_2")
k3_both_disc <- kmeans(both_disc_T, centers = 3, nstart = 10000, iter.max = 30)
plotcluster(both_disc_T, k3_both_disc$cluster, bw = FALSE)
both_disc_km_3 <- k3_both_disc$cluster %>% as.data.frame() %>% set_colnames("F_km_3")
# k4_both_disc <- kmeans(both_disc_T, centers = 4, nstart = 10000, iter.max = 30)
# plotcluster(both_disc_T, k4_both_disc$cluster, bw = FALSE)
df5 <- all_T
df5$class <- c("cancerous", "normal", rep("unknown", 1000))
df5$class
kn <- knn(train = df5[1:2,-117], test = df5[-c(1,2),-117], cl = df5[1:2,]$class, k = 2)
library(class)
library(class)
df5 <- all_T
df5$class <- c("cancerous", "normal", rep("unknown", 1000))
kn <- knn(train = df5[1:2,-117], test = df5[-c(1,2),-117], cl = df5[1:2,]$class, k = 2)
knn(train = df5[1:2,-117], test = df5[-c(1,2),-117], cl = df5[1:2,]$class, k = 2)
kn <- knn(train = df5[1:2,-117], test = df5[-c(1,2),-117], cl = df5[1:2,]$class, k = 3)
kn <- knn(train = df5[1:2,-117], test = df5[-c(1,2),-117], cl = df5[1:2,]$class, k = 4)
kn <- knn(train = df5[1:2,-117], test = df5[-c(1,2),-117], cl = df5[1:2,]$class, k = 2)
?:knn
?knn
kn
length(kn)
all_T
head(all_T)
getwd()
cancerousTest <- read.delim("~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering/DiscreteBoth/cancerousTest.txt")
View(cancerousTest)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = FALSE)
library(devtools)
library(ggplot2)
library(tidyverse)
library(cluster)
library(HSAUR)
library(fpc)
library(NMF)
library(ggfortify)
library(factoextra)
library(dendextend)
library(ClassDiscovery)
library(magrittr)
library(MASS)
library(class)
normalTest <- read.delim("~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering/DiscreteBoth/normalTest.txt")
normalTest <- read.delim("~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering/DiscreteBoth/normalTest.txt")
normalTest <- read.delim("~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering/DiscreteBoth/normalTest.txt")
View(normalTest)
normalTest <- read.delim("~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering/DiscreteBoth/normalTest.txt")
cancerousTest$class <- rep("cancerous", nrow(cancerousTest))
normalTest$class <- rep("normal", nrow(normalTest))
test <- rbind(cancerousTest, normalTest)
View(test)
test$class
train <- rbind(cancerousTrain, normalTrain)
# Create training set
cancerousTrain <- read.delim("~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering/DiscreteBoth/cancerousTrain.txt")
cancerousTrain$class <- rep("cancerous", nrow(cancerousTrain))
normalTrain <- read.delim("~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering/DiscreteBoth/normalTrain.txt")
normalTrain$class <- rep("normal", nrow(normalTrain))
train <- rbind(cancerousTrain, normalTrain)
Test <- read.delim("~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering/DiscreteBoth/Test.txt")
View(Test)
Train <- rbind(cancerousTrain, normalTrain)
ncol(Train)
Test <- read.delim("~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering/DiscreteBoth/Test.txt", row.names=1)
View(Test)
# Create training set
cancerousTrain <- read.delim("~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering/DiscreteBoth/cancerousTrain.txt", row.names=1)
cancerousTrain$class <- rep("cancerous", nrow(cancerousTrain))
normalTrain <- read.delim("~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering/DiscreteBoth/normalTrain.txt", row.names = 1)
normalTrain$class <- rep("normal", nrow(normalTrain))
Train <- rbind(cancerousTrain, normalTrain)
# creating test set
Test <- read.delim("~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering/DiscreteBoth/Test.txt", row.names = 1)
ncol(train)
ncol(Train)
kn <- knn(train = Train[,-117], test = Test, cl = Train$class, k = 2)
kn <- knn(train = Train[,-117], test = Test, cl = Train$class, k = 5)
kn
norw(Test)
nrow(Test)
nrow(Test) + nrow(Train)
reticulate::repl_python()
reticulate::source_python('~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering/DiscreteBoth/cluster_patterns.py')
reticulate::source_python('~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering/DiscreteBoth/cluster_patterns.py')
reticulate::source_python('~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering/DiscreteBoth/cluster_patterns.py')
reticulate::source_python('~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering/DiscreteBoth/cluster_patterns.py')
reticulate::source_python('~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering/DiscreteBoth/cluster_patterns.py')
reticulate::source_python('~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering/DiscreteBoth/cluster_patterns.py')
kn
for (elem in kn) print(elem)
pert2205_attr <- read.delim("~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering/DiscreteBoth/pert2205_attr", header=FALSE, row.names=1)
View(pert2205_attr)
test <- read.delim("~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering/DiscreteBoth/pert2205_attr", header=FALSE, row.names=1)
kn2 <- knn(train = Train[,-117], test = test, cl = Train$class, k = 5)
test <- read.delim("~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering/DiscreteBoth/pert2205_attr", header=FALSE, row.names=1) %>% t() %>% as.data.frame()
kn2 <- knn(train = Train[,-117], test = test, cl = Train$class, k = 5)
kn2
kn2 <- knn(train = Train[,-117], test = test, cl = Train$class, k = 10)
kn2
kn2 <- knn(train = Train[,-117], test = test, cl = Train$class, k = 100)
kn2
kn2 <- knn(train = Train[,-117], test = test, cl = Train$class, k = 1000)
kn2 <- knn(train = Train[,-117], test = test, cl = Train$class, k = 684)
kn2 <- knn(train = Train[,-117], test = test, cl = Train$class, k = 680)
kn2 <- knn(train = Train[,-117], test = test, cl = Train$class, k = 600)
kn2 <- knn(train = Train[,-117], test = test, cl = Train$class, k = 700)
kn2 <- knn(train = Train[,-117], test = test, cl = Train$class, k = 500)
kn2 <- knn(train = Train[,-117], test = test, cl = Train$class, k = 40)
kn2
kn2 <- knn(train = Train[,-117], test = test, cl = Train$class, k = 60)
kn2
kn2 <- knn(train = Train[,-117], test = test, cl = Train$class, k = 200)
kn2
kn2 <- knn(train = Train[,-117], test = test, cl = Train$class, k = 300)
kn3
kn2
testAll <- read.delim("~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/insilico_perturbations/testSet.txt", header=FALSE, row.names=1)
View(testAll)
names(testAll) <- names(train)
names(train)
names(testAll) <- names(test)
names(test)
names(testAll)
names(test)
length(names(test))
length(names(testAll))
testAll <- read.delim("~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/insilico_perturbations/testSet.txt", header=FALSE, row.names=1)
names(testAll) <- names(test)
names(testAll)
kn3 <- knn(train = Train[,-117], test = testAll, cl = Train$class, k =5)
ln3
kn3
kn3 <- knn(train = Train[,-117], test = testAll, cl = Train$class, k =100)
kn3
View(k3_both_disc)
View(k3_DAC_disc)
View(k3_both_disc)
View(k3_DAC_disc)
View(k3_disc)
View(k3_DAC_disc)
View(k3_disc)
df5 <- all_T
df5$class <- c("cancerous", "normal", rep("unknown", 1000))
kn <- knn(train = df5[1:2,-117], test = df5[-c(1,2),-117], cl = df5[1:2,]$class, k = 2)
res <- as.data.frame("attractor" = row.names(df5)[-c(1,2)], "cluster"=kn)
row.names(df5)[-c(1,2)]
kn
typeof(kn)
res <- as.data.frame("attractor" = row.names(df5)[-c(1,2)], "cluster"=list(kn))
list(kn)
res <- as.data.frame("attractor" = row.names(df5)[-c(1,2)], "cluster"=as.list(kn))
as.list(kn)
res <- as.data.frame("attractor" = row.names(df5)[-c(1,2)], "cluster"=as.character(kn))
as.character(kn)
typeof(as.character(kn))
typeof(as.list(as.character(kn)))
res <- as.data.frame("attractor" = row.names(df5)[-c(1,2)], "cluster"=as.list(as.character(kn)))
row.names(df5)[-c(1,2)]
as.list(as.character(kn))
as.character(kn)
res <- as.data.frame("attractor" = row.names(df5)[-c(1,2)], "cluster"= as.character(kn))
res <- as.data.frame("attractor" = row.names(df5)[-c(1,2)], "cluster"= c(as.character(kn)))
str(kn)
str(as.character(kn))
str(row.names(df5)[-c(1,2)])
?as.data.frame()
?as.data.frame
res <- as.data.frame("attractor" = row.names(df5)[-c(1,2)], "cluster"= as.character(kn), stringsAsFactors = FALSE)
res <- data.frame("attractor" = row.names(df5)[-c(1,2)], "cluster"= as.character(kn), stringsAsFactors = FALSE)
res
knitr::opts_chunk$set(echo = FALSE)
library(devtools)
library(ggplot2)
library(tidyverse)
library(cluster)
library(HSAUR)
library(fpc)
library(NMF)
library(ggfortify)
library(factoextra)
library(dendextend)
library(ClassDiscovery)
library(magrittr)
library(MASS)
library(class)
kn <- knn(train = Train[,-117], test = Test, cl = Train$class, k = 5)
# Classifying a perturbation we deemed successful based on readout nodes
kn <- knn(train = Train[,-117], test = test, cl = Train$class, k = 10)
head(test)
# creating test set
test <- read.delim("~/Documents/GitHub/gastonguay_compsysmed_labnotebook/_projects/project2/NetworkAnalysis/SFA/Clustering/DiscreteBoth/pert2205_attr", header=FALSE, row.names=1) %>% t() %>% as.data.frame()
head(test)
res <- data.frame("attractor" = "perturbation 2205", "cluster"= as.character(kn), stringsAsFactors = FALSE)
res
testAll
# Classifying all pertrubations we deemed successful
kn3 <- knn(train = Train[,-117], test = testAll, cl = Train$class, k =10)
res <- data.frame("attractor" = row.names(testAll), "cluster"= as.character(kn3), stringsAsFactors = FALSE)
res
rnorm(5,0,1)
?rnorm
rnorm(5,0,1)
Now try the following:
```{r}
x <- rnorm(5)
```
Note a few things:
x <- rnorm(5)
x
age <- c(1,3,5,2,11,9,3,9,12,3)
weight <- c(4.4,5.3,7.2,5.2,8.5,7.3,6.0,10.4,10.2,6.1)
mean(weight)
sd(weight)
cor(age,weight)
plot(age,weight)
age <- c(1,3,5,2,11,9,3,9,12,3)
weight <- c(4.4,5.3,7.2,5.2,8.5,7.3,6.0,10.4,10.2,6.1)
mean(weight)
sd(weight)
cor(age,weight)
plot(age,weight)
library(rmarkdown)
library(xtable)
x <- rnorm(n, mu, sd)
---
title: "Lab 1 -- Part II: using knitr"
author: "Maddie Gastonguay"
date: "09/05/2019"
output: html_document
---
This is an rmarkdown document that highlights some basic functionality of the package.
Use the following cheat-sheet in this lab:
<https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf>
First, notice the header of the Rmd file in the first 6 lines. They contain the title of the document, the author,
the date, and the output format.
The output format can be
* html_document
* pdf_document
* word_document
Other formats are also available, if you want to create a presentation.
Go ahead and click on the **Knit HTML** button. The header does not appear in the output. As you go forward with this document,
click on Knit HTML again, and see whether your changes had the desired effects.
Use the information in the cheat-sheet to make formatting changes.
In the following, make the necessary changes, so that every line that starts with H1 is displayed as a top-level header (Header 1)
and every line that starts with H2 is displayed as Header 2.
# Markdown Syntax
## Font
**Make this line appear in bold.**
*Make this sentence appear in italics.*
Note that in order to start a new line in the output, you must have a blank line in this input file. Try it with the two previous
lines.
## Lists
Display the following lines as an unordered list:
* bread
* eggs
* milk
* instant coffee
Reorder the following artists according to your taste, and display it as an ordered list:
1. Adele
2. oldplay
3. OneRepublic
4. Taylor Swift
5. Imagine Dragons
***
# knitr chunk options
We can embed R code chunks in the document. Here is an example:
```{r,echo=TRUE,eval=TRUE,highlight=TRUE,include=TRUE}
rnorm(30)
```
The "chunks" begin and end with three back-ticks. The example above uses four options:
option | description
-------|------------
echo   | display the code if set to TRUE
eval   | run the code if set to TRUE
highlight | Use code highlighting if set to TRUE
include | include the chunk in the output if set to TRUE
(note, by the way, how the previous lines were used to create a table)
Try different settings of the values of echo, eval, highlight, and include, and each time, click on the Knit HTML button to see the effect
of the setting on the output.
You can also include R code within a line, using a single back-tick: `r mean(rnorm(30))` is the mean of a random sample of
30 random draws from a standard normal distribution.
## Exercise:
Create a code chunk in which you
1. Set the sample size (n), the mean (mu), and the standard deviation (sd)
2. Draw n random numbers from a uniform distribution with mean mu and standard deviation sd. The random sample will be called x
3. Plot a histogram of the data
```{r}
n <- 10
mu <- 0
sd <- 1
x <- rnorm(n, mu, sd)
```
n <- 10
mu <- 0
sd <- 1
x <- rnorm(n, mu, sd)
hist(x)
?hist
?geom_histogram
ggplot() + geom_histogram(data = x, stat = "bin")
typeof(x)
hist(x)
?hist
hist(x, xlab = "Random Numbers")
x
x <- rnorm(n, mu, sd) %>% as.data.frame()
x
names(x) <- "number"
ggplot(data = x, (aes = number)) + geom_histogram()
ggplot(data = x, aes(number)) + geom_histogram()
ggplot(data = x, aes(data$number)) + geom_histogram()
X
x
ggplot(data = x, aes(x$number)) + geom_histogram()
"knitr" %in% rownames(installed.packages())
x <- rnorm(30, 0, 1)
y <- runif(30, 0, 1)
# The summation, maximum, minimum, median of x
sum(x)
max(x)
min(x)
median(x)
# The summation, maximum, minimum, median of y
sum(y)
max(y)
min(y)
median(y)
